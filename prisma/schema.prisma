// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum ChannelCategory {
  TEXT
  VOICE
  VIDEO
}

model User {
  id                     String          @id @default(cuid())
  clerkUserId            String          @unique
  name                   String
  email                  String
  imageUrl               String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  userRole               UserRole        @default(MEMBER)
  member                 Member[]
  messages               Message[]
  directMessagesSent     DirectMessage[] @relation("Sender")
  directMessagesReceived DirectMessage[] @relation("Receiver")
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String?
  inviteCode String?   @unique
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    Member[]
  channels   Channel[]
}

model Channel {
  id              String          @id @default(cuid())
  name            String
  channelCategory ChannelCategory @default(TEXT)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  serverId        String
  server          Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  chat            Chat?
}

model Member {
  id       String @id @default(cuid())
  userId   String
  serverId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([userId, serverId])
}

model Chat {
  id        String    @id @default(cuid())
  channelId String    @unique
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  message   String
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    String
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id         String   @id @default(cuid())
  message    String
  fileUrl    String?
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}
