generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum ChannelCategory {
  TEXT
  VOICE
  VIDEO
}

model User {
  id             String           @id @default(cuid())
  name           String?
  username       String?          @unique
  email          String?          @unique
  emailVerified  DateTime?
  password       String?          @unique
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  account        Account?
  members        Member[]
  session        Session[]
  VisitedChannel VisitedChannel[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?    @relation(fields: [userId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@index([userId])
}

model Member {
  id         String        @id @default(cuid())
  memberRole MemberRole    @default(MEMBER)
  userId     String
  serverId   String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  server     Server        @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages   Message[]
  sender     Conversation? @relation("Sender")
  receiver   Conversation? @relation("Receiver")

  @@unique([userId, serverId])
}

model Server {
  id              String           @id @default(uuid())
  name            String
  image           String?
  inviteCode      String?          @unique
  isDefault       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         Member[]
  channels        Channel[]
  VisitedChannels VisitedChannel[]
}

model Channel {
  id              String           @id @default(cuid())
  name            String
  channelCategory ChannelCategory  @default(TEXT)
  isDefault       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  serverId        String
  server          Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  chat            Chat?
  VisitedChannels VisitedChannel[]
}

model VisitedChannel {
  id        String   @id @default(cuid())
  visitedAt DateTime @default(now())
  serverId  String
  channelId String
  userId    String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: NoAction)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@index([serverId, channelId])
}

model Chat {
  id        String    @id @default(cuid())
  channelId String    @unique
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Conversation {
  id            String          @id @default(cuid())
  senderId      String          @unique
  receiverId    String          @unique
  sender        Member          @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      Member          @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  DirectMessage DirectMessage[]
}

model Message {
  id        String   @id @default(cuid())
  message   String?
  fileUrl   String?
  isEdited  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    String
  memberId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id             String       @id @default(cuid())
  message        String
  fileUrl        String?
  senderId       String
  receiverId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
}
